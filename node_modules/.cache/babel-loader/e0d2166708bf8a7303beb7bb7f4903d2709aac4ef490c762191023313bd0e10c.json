{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { NameSpace } from '../utils/nameSpace';\nimport { getToken, removeToken, saveToken } from '../utils/token';\nimport { getAuth } from '../store/serverData/serverData';\nimport { getUserInfo } from '../store/userActivity/userActivity';\nexport const sixCitiesApi = createApi({\n  reducerPath: NameSpace.sixCitiesApi,\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://13.react.htmlacademy.pro/six-cities',\n    prepareHeaders: headers => {\n      const token = getToken();\n      if (token) {\n        headers.set('x-token', `${token}`);\n      }\n      return headers;\n    }\n  }),\n  tagTypes: ['OFFERS', 'NEARBY', 'FAVORITES', 'COMMENTS'],\n  endpoints: builder => ({\n    //queries\n    getOffers: builder.query({\n      query: () => '/offers',\n      providesTags: ['OFFERS']\n    }),\n    getNearbyOffers: builder.query({\n      query: id => `/offers/${id}/nearby`,\n      providesTags: ['FAVORITES']\n    }),\n    getComments: builder.query({\n      query: id => `/comments/${id}`,\n      providesTags: ['COMMENTS']\n    }),\n    //mutations\n    fetchAddComment: builder.mutation({\n      query: ({\n        id,\n        comment,\n        rating\n      }) => ({\n        url: `/comments/${id}`,\n        method: 'POST',\n        body: {\n          comment,\n          rating\n        }\n      }),\n      invalidatesTags: ['COMMENTS']\n    }),\n    fetchAddFavorite: builder.mutation({\n      query: id => ({\n        url: `favorite/${id}/1`,\n        method: 'POST'\n      }),\n      invalidatesTags: ['FAVORITES']\n    }),\n    fetchRemoveFavorite: builder.mutation({\n      query: id => ({\n        url: `favorite/${id}/0`,\n        method: 'POST'\n      }),\n      invalidatesTags: ['FAVORITES']\n    }),\n    //authentication\n    fetchLogin: builder.mutation({\n      query: ({\n        email,\n        password\n      }) => ({\n        url: '/login',\n        method: 'POST',\n        body: {\n          email,\n          password\n        }\n      }),\n      async onQueryStarted({\n        email,\n        password\n      }, {\n        dispatch,\n        queryFulfilled\n      }) {\n        const {\n          data: {\n            token\n          }\n        } = await queryFulfilled;\n        saveToken(token);\n        dispatch(getAuth('AUTH'));\n        dispatch(getUserInfo(`${email}`));\n      }\n    }),\n    fetchLogout: builder.mutation({\n      query: () => ({\n        url: '/logout',\n        method: 'DELETE'\n      }),\n      async onQueryStarted(_arg, {\n        dispatch,\n        queryFulfilled\n      }) {\n        await queryFulfilled;\n        removeToken();\n        dispatch(getAuth('NO_AUTH'));\n        dispatch(getUserInfo(undefined));\n      }\n    })\n  })\n});\nexport const {\n  useGetOffersQuery,\n  useGetNearbyOffersQuery,\n  useGetCommentsQuery,\n  useFetchLogoutMutation,\n  useFetchLoginMutation,\n  useFetchAddCommentMutation,\n  useFetchRemoveFavoriteMutation,\n  useFetchAddFavoriteMutation\n} = sixCitiesApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","NameSpace","getToken","removeToken","saveToken","getAuth","getUserInfo","sixCitiesApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","token","set","tagTypes","endpoints","builder","getOffers","query","providesTags","getNearbyOffers","id","getComments","fetchAddComment","mutation","comment","rating","url","method","body","invalidatesTags","fetchAddFavorite","fetchRemoveFavorite","fetchLogin","email","password","onQueryStarted","dispatch","queryFulfilled","data","fetchLogout","_arg","undefined","useGetOffersQuery","useGetNearbyOffersQuery","useGetCommentsQuery","useFetchLogoutMutation","useFetchLoginMutation","useFetchAddCommentMutation","useFetchRemoveFavoriteMutation","useFetchAddFavoriteMutation"],"sources":["/Users/a79858/Documents/GitHub/SixCitiesLast/src/features/sixCitiesApi.ts"],"sourcesContent":["import {createApi, fetchBaseQuery} from '@reduxjs/toolkit/query/react';\nimport {NameSpace} from '../utils/nameSpace';\nimport {getToken, removeToken, saveToken} from '../utils/token';\nimport {CommentServerType, OffersArray} from '../types/types';\nimport {ServerResponse} from 'node:http';\nimport {getAuth} from '../store/serverData/serverData';\nimport {getUserInfo} from '../store/userActivity/userActivity';\n\nexport const sixCitiesApi = createApi({\n  reducerPath: NameSpace.sixCitiesApi,\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://13.react.htmlacademy.pro/six-cities',\n    prepareHeaders: (headers) => {\n      const token = getToken();\n      if (token) {\n        headers.set('x-token', `${token}`);\n      }\n      return headers;\n    }\n  }),\n  tagTypes: ['OFFERS', 'NEARBY', 'FAVORITES', 'COMMENTS'],\n  endpoints: (builder) => ({\n    //queries\n    getOffers: builder.query<OffersArray,void>({\n      query: () => '/offers',\n      providesTags: ['OFFERS'],\n    }),\n    getNearbyOffers: builder.query<OffersArray, number>({\n      query: (id: number) => `/offers/${id}/nearby`,\n      providesTags: ['FAVORITES']\n    }),\n    getComments: builder.query<CommentServerType[], number>({\n      query: (id: number) => `/comments/${id}`,\n      providesTags: ['COMMENTS']\n    }),\n\n    //mutations\n    fetchAddComment: builder.mutation<void, {id: number; comment: string; rating: number}>({\n      query: ({id, comment, rating}) => ({\n        url: `/comments/${id}`,\n        method: 'POST',\n        body: ({comment, rating})\n      }),\n      invalidatesTags: ['COMMENTS']\n    }),\n    fetchAddFavorite: builder.mutation<ServerResponse, number>({\n      query: (id: number) => ({\n        url: `favorite/${id}/1`,\n        method: 'POST',\n      }),\n      invalidatesTags: ['FAVORITES']\n    }),\n    fetchRemoveFavorite: builder.mutation<ServerResponse, number>({\n      query: (id: number) => ({\n        url: `favorite/${id}/0`,\n        method: 'POST',\n      }),\n      invalidatesTags: ['FAVORITES']\n    }),\n\n    //authentication\n    fetchLogin: builder.mutation<{id: number; email: string; token: string}, {email: string; password: string}>({\n      query: ({email, password}) => ({\n        url: '/login',\n        method: 'POST',\n        body: ({email, password})\n      }),\n      async onQueryStarted({email, password}, {dispatch, queryFulfilled}) {\n        const {data: {token}} = await queryFulfilled;\n        saveToken(token);\n        dispatch(getAuth('AUTH'));\n        dispatch(getUserInfo(`${email}`));\n      },\n    }),\n    fetchLogout: builder.mutation<void,void>({\n      query: () => ({\n        url: '/logout',\n        method: 'DELETE',\n      }),\n      async onQueryStarted(_arg, {dispatch, queryFulfilled}) {\n        await queryFulfilled;\n        removeToken();\n        dispatch(getAuth('NO_AUTH'));\n        dispatch(getUserInfo(undefined))\n      }\n    })\n  }),\n});\n\nexport const {\n  useGetOffersQuery,\n  useGetNearbyOffersQuery,\n  useGetCommentsQuery,\n  useFetchLogoutMutation,\n  useFetchLoginMutation,\n  useFetchAddCommentMutation,\n  useFetchRemoveFavoriteMutation,\n  useFetchAddFavoriteMutation\n} = sixCitiesApi;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}